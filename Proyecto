#include <iostream>
#include <cstring> // Para strcmp
#include <limits> // Para limpiar el buffer de entrada
using namespace std;

struct Estudiante {
    char nombre[40];
    char apellido[40];
    int codigo; // Cambiado a entero
    int fechaDeNacimiento;
    Estudiante *izquierda;
    Estudiante *derecha;
};

Estudiante* crearEstudiante() {
    Estudiante *nuevoEstudiante = new Estudiante;
    cout << "Ingrese el nombre del estudiante: ";
    cin.getline(nuevoEstudiante->nombre, 40);
    cout << "Ingrese el apellido del estudiante: ";
    cin.getline(nuevoEstudiante->apellido, 40);
    cout << "Ingrese el codigo del estudiante: ";
    cin >> nuevoEstudiante->codigo;
    cout << "Ingrese la fecha de nacimiento del estudiante (AAAAMMDD): ";
    cin >> nuevoEstudiante->fechaDeNacimiento;
    cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Limpiar el buffer de entrada
    nuevoEstudiante->izquierda = nullptr;
    nuevoEstudiante->derecha = nullptr;
    return nuevoEstudiante;
}

void insertarPorFecha(Estudiante *&arbol, Estudiante *nuevoEstudiante) {
    if (arbol == nullptr) {
        arbol = nuevoEstudiante;
    } else {
        if (nuevoEstudiante->fechaDeNacimiento < arbol->fechaDeNacimiento) {
            insertarPorFecha(arbol->izquierda, nuevoEstudiante);
        } else {
            insertarPorFecha(arbol->derecha, nuevoEstudiante);
        }
    }
}

void insertarPorCodigo(Estudiante *&arbol, Estudiante *nuevoEstudiante) {
    if (arbol == nullptr) {
        arbol = nuevoEstudiante;
    } else {
        if (nuevoEstudiante->codigo < arbol->codigo) {
            insertarPorCodigo(arbol->izquierda, nuevoEstudiante);
        } else {
            insertarPorCodigo(arbol->derecha, nuevoEstudiante);
        }
    }
}

void mostrarPreorden(Estudiante *arbol) {
    if (arbol != nullptr) {
        cout << arbol->nombre << " " << arbol->apellido << " - Codigo: " << arbol->codigo << ", Fecha de Nacimiento: " << arbol->fechaDeNacimiento << endl;
        mostrarPreorden(arbol->izquierda);
        mostrarPreorden(arbol->derecha);
    }
}

void mostrarInorden(Estudiante *arbol) {
    if (arbol != nullptr) {
        mostrarInorden(arbol->izquierda);
        cout << arbol->nombre << " " << arbol->apellido << " - Codigo: " << arbol->codigo << ", Fecha de Nacimiento: " << arbol->fechaDeNacimiento << endl;
        mostrarInorden(arbol->derecha);
    }
}

void mostrarPostorden(Estudiante *arbol) {
    if (arbol != nullptr) {
        mostrarPostorden(arbol->izquierda);
        mostrarPostorden(arbol->derecha);
        cout << arbol->nombre << " " << arbol->apellido << " - Codigo: " << arbol->codigo << ", Fecha de Nacimiento: " << arbol->fechaDeNacimiento << endl;
    }
}

Estudiante *encontrarSucesor(Estudiante *nodo) {
    Estudiante *actual = nodo;
    while (actual->izquierda != nullptr) {
        actual = actual->izquierda;
    }
    return actual;
}

void eliminarPorCodigo(Estudiante *&arbol, int codigo) {
    if (arbol == nullptr) {
        return;
    }
    if (codigo < arbol->codigo) {
        eliminarPorCodigo(arbol->izquierda, codigo);
    } else if (codigo > arbol->codigo) {
        eliminarPorCodigo(arbol->derecha, codigo);
    } else {
        // Caso 1: El nodo es una hoja (no tiene hijos)
        if (arbol->izquierda == nullptr && arbol->derecha == nullptr) {
            delete arbol;
            arbol = nullptr;
        }
        // Caso 2: El nodo tiene un solo hijo
        else if (arbol->izquierda == nullptr) {
            Estudiante *temp = arbol;
            arbol = arbol->derecha;
            delete temp;
        } else if (arbol->derecha == nullptr) {
            Estudiante *temp = arbol;
            arbol = arbol->izquierda;
            delete temp;
        }
        // Caso 3: El nodo tiene dos hijos
        else {
            Estudiante *sucesor = encontrarSucesor(arbol->derecha);
            arbol->codigo = sucesor->codigo;
            eliminarPorCodigo(arbol->derecha, sucesor->codigo);
        }
    }
}

int main() {
    Estudiante *arbolPorFecha = nullptr;
    Estudiante *arbolPorCodigo = nullptr;

    int opcion;
    do {
        cout << "\nMenu:" << endl;
        cout << "1. Registrar estudiante" << endl;
        cout << "2. Mostrar estudiantes por fecha de nacimiento" << endl;
        cout << "3. Mostrar estudiantes por codigo de estudiante" << endl;
        cout << "4. Eliminar estudiante por codigo" << endl;
        cout << "5. Salir" << endl;
        cout << "Ingrese su opcion: ";
        cin >> opcion;
        cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Limpiar el buffer de entrada

        switch (opcion) {
            case 1: {
                Estudiante *nuevoEstudiante = crearEstudiante();
                Estudiante *nuevoEstudiantePorFecha = new Estudiante(*nuevoEstudiante); // Creamos una copia para cada arbol
                Estudiante *nuevoEstudiantePorCodigo = new Estudiante(*nuevoEstudiante);
                insertarPorFecha(arbolPorFecha, nuevoEstudiantePorFecha);
                insertarPorCodigo(arbolPorCodigo, nuevoEstudiantePorCodigo);
                break;
            }
            case 2: {
                cout << "Recorrido Preorden por Fecha de Nacimiento:" << endl;
                mostrarPreorden(arbolPorFecha);

                cout << "\nRecorrido Inorden por Fecha de Nacimiento:" << endl;
                mostrarInorden(arbolPorFecha);

                cout << "\nRecorrido Postorden por Fecha de Nacimiento:" << endl;
                mostrarPostorden(arbolPorFecha);
                break;
            }
            case 3: {
                cout << "Recorrido Preorden por Codigo de Estudiante:" << endl;
                mostrarPreorden(arbolPorCodigo);

                cout << "\nRecorrido Inorden por Codigo de Estudiante:" << endl;
                mostrarInorden(arbolPorCodigo);

                cout << "\nRecorrido Postorden por Codigo de Estudiante:" << endl;
                mostrarPostorden(arbolPorCodigo);
                break;
            }
            case 4: {
                int codigoAEliminar;
                cout << "Ingrese el codigo del estudiante a eliminar: ";
                cin >> codigoAEliminar;
                cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Limpiar el buffer de entrada
                eliminarPorCodigo(arbolPorFecha, codigoAEliminar);
                eliminarPorCodigo(arbolPorCodigo, codigoAEliminar);
                break;
            }
            case 5: {
                cout << "Saliendo del programa..." << endl;
                break;
            }
            default:
                cout << "Opcion invalida. Por favor, ingrese un numero del 1 al 5." << endl;
        }
    } while (opcion != 5);

   
   // Liberar la memoria del árbol por fecha de nacimiento
while (arbolPorFecha != nullptr) {
    Estudiante *temp = arbolPorFecha;
    arbolPorFecha = arbolPorFecha->izquierda;
    delete temp;
}

// Liberar la memoria del árbol por código de estudiante
while (arbolPorCodigo != nullptr) {
    Estudiante *temp = arbolPorCodigo;
    arbolPorCodigo = arbolPorCodigo->izquierda;
    delete temp;
}

    return 0;
}

